"""
Fundamental blocks for AES-128 implementation
"""

from functools import reduce

#SubBytes

sbox = {
    "sbox_aes": [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
    ],
    "sbox_freyre_1": [
    0xF2, 0x35, 0x3C, 0xA6, 0xE5, 0xC0, 0x8C, 0xBF, 0x0D, 0xA7, 0xEC, 0x08, 0xE4, 0x8B, 0x79, 0x59, 
    0x85, 0x3A, 0xCA, 0x55, 0xDE, 0x07, 0x20, 0xFA, 0x11, 0x3E, 0xFF, 0x19, 0xE8, 0xDC, 0x1E, 0xC9, 
    0x91, 0xA5, 0x47, 0x4B, 0x43, 0xDB, 0xC7, 0x12, 0xBD, 0x90, 0xA2, 0xBE, 0x9E, 0x93, 0xF8, 0xA1, 
    0xC6, 0x6C, 0x1D, 0xB8, 0xA0, 0x7C, 0xFB, 0x4C, 0xD7, 0x86, 0x80, 0xF9, 0x8A, 0x2D, 0xB6, 0x96, 
    0x95, 0x9B, 0x17, 0xE2, 0x6B, 0x40, 0x89, 0xED, 0xD0, 0xDD, 0x57, 0x00, 0xE0, 0xA3, 0xBB, 0xF4, 
    0xA4, 0x70, 0x63, 0xF1, 0x7D, 0x48, 0x44, 0x6F, 0x0E, 0xAF, 0x3D, 0x03, 0xB5, 0xA9, 0x13, 0xD5, 
    0xA8, 0x94, 0x78, 0xAA, 0x18, 0x9F, 0x97, 0x22, 0x7E, 0x81, 0x26, 0xFC, 0xB9, 0x5E, 0x83, 0x62, 
    0x33, 0x9C, 0x2A, 0xEA, 0x50, 0xCD, 0xEE, 0x05, 0xFE, 0x30, 0x04, 0xD3, 0x0B, 0xC3, 0x87, 0x5C, 
    0x74, 0x1C, 0x7A, 0x71, 0x5F, 0x29, 0x28, 0x1F, 0x61, 0xDA, 0xDF, 0x46, 0x4E, 0x6D, 0xB1, 0x2E, 
    0x6A, 0x5D, 0x65, 0x5A, 0xD6, 0x88, 0x34, 0xF3, 0x32, 0xF6, 0x73, 0x58, 0x69, 0xC2, 0x66, 0xD8, 
    0x39, 0xD2, 0x4A, 0x99, 0x06, 0x6E, 0x3F, 0xC4, 0xE7, 0x2C, 0x49, 0x3B, 0xC8, 0xD4, 0xF0, 0xD9, 
    0xD1, 0x4D, 0xB2, 0x0F, 0x92, 0xB7, 0xAE, 0x84, 0x37, 0x14, 0x21, 0x7F, 0x8F, 0x56, 0x8E, 0x98, 
    0x1A, 0x68, 0x67, 0xE9, 0x9D, 0x25, 0x09, 0xCB, 0x41, 0xAD, 0xCF, 0x51, 0x72, 0xE3, 0x64, 0x16, 
    0xCC, 0xBA, 0xC5, 0xB4, 0x5B, 0x01, 0x52, 0xF5, 0xC1, 0xFD, 0x77, 0x02, 0xB0, 0x38, 0x27, 0x8D, 
    0xE6, 0x36, 0xAC, 0x45, 0x0C, 0x75, 0x7B, 0x82, 0xEB, 0x24, 0x42, 0xBC, 0x31, 0x60, 0x9A, 0x76, 
    0x2B, 0x1B, 0x4F, 0x2F, 0x23, 0xEF, 0xCE, 0x10, 0xB3, 0x0A, 0x54, 0xF7, 0xE1, 0xAB, 0x15, 0x53  
    ],
    "sbox_freyre_2": [
    0x55, 0x38, 0x84, 0x9B, 0x5C, 0x3D, 0xC0, 0xF6, 0xF2, 0x02, 0xC3, 0x4C, 0xBF, 0xC4, 0xE9, 0xC7, 
    0x34, 0x94, 0x9D, 0x8C, 0xCE, 0xAE, 0xED, 0x86, 0x50, 0x67, 0x69, 0x4A, 0x90, 0xBB, 0xD2, 0xB4, 
    0x11, 0xAF, 0xF0, 0xE8, 0x5A, 0xFD, 0xB9, 0x47, 0xB1, 0x95, 0xD9, 0x40, 0x4B, 0x27, 0xBE, 0x54, 
    0x9E, 0x14, 0x07, 0x65, 0x7D, 0x89, 0x3E, 0x63, 0xA9, 0x1D, 0x82, 0x2F, 0x1F, 0x78, 0x2A, 0x7E, 
    0xC2, 0xC5, 0x01, 0x6F, 0xB5, 0xDA, 0x60, 0xEB, 0xE7, 0xA4, 0x0F, 0x1C, 0xDF, 0x19, 0x74, 0x72, 
    0x62, 0x44, 0x6E, 0x80, 0x73, 0x6C, 0xF9, 0xC8, 0x48, 0xB6, 0x33, 0x2B, 0x68, 0xFC, 0x8E, 0x37, 
    0x10, 0x3B, 0xA6, 0x96, 0xC1, 0xCF, 0x57, 0xEA, 0x8A, 0x6A, 0xE3, 0x08, 0x8D, 0xB2, 0xBD, 0x52, 
    0x7A, 0x88, 0xB0, 0x1B, 0xD7, 0x2C, 0xE6, 0x66, 0x91, 0x9A, 0x06, 0x6B, 0x59, 0x17, 0x83, 0xDB, 
    0xD5, 0x22, 0x85, 0x4D, 0xFE, 0x0B, 0xAD, 0xF4, 0x56, 0x32, 0x03, 0x5E, 0xB3, 0xDC, 0x26, 0x7B, 
    0x16, 0xCD, 0x4E, 0x2E, 0x21, 0xFF, 0xAC, 0x79, 0xA1, 0x23, 0xEC, 0x04, 0xC6, 0xE4, 0x7F, 0x28, 
    0x53, 0x39, 0xCB, 0xA0, 0xD4, 0x7C, 0xFB, 0x3A, 0x0C, 0x5D, 0x58, 0x92, 0x05, 0x3F, 0xD6, 0x5B, 
    0x25, 0x61, 0x12, 0xBC, 0xA3, 0xE1, 0x29, 0x5F, 0x75, 0x41, 0x1A, 0x98, 0xDE, 0x51, 0x4F, 0x93, 
    0x97, 0x24, 0xE2, 0x49, 0xB7, 0xE0, 0x36, 0x8B, 0xB8, 0xD8, 0x18, 0xF1, 0xC9, 0xE5, 0x31, 0xF5, 
    0x30, 0xA7, 0x43, 0x0E, 0xA8, 0xF7, 0x6D, 0x8F, 0xCC, 0x99, 0xEE, 0x42, 0xD3, 0x1E, 0xF8, 0x45, 
    0x2D, 0xA2, 0xDD, 0x20, 0x9C, 0xAA, 0xEF, 0x81, 0x64, 0x77, 0x46, 0x0D, 0x13, 0x76, 0x35, 0xD1, 
    0xD0, 0x71, 0x00, 0xF3, 0x87, 0xA5, 0x15, 0x9F, 0xAB, 0x0A, 0x70, 0xCA, 0xFA, 0x09, 0x3C, 0xBA  
    ],
    "sbox_freyre_3": [
    0xCC, 0x35, 0x88, 0x65, 0x05, 0xC1, 0x0D, 0x91, 0x99, 0x61, 0x4B, 0xF8, 0xFB, 0xEC, 0x77, 0xFA, 
    0x28, 0x92, 0x02, 0x89, 0x13, 0xB0, 0x3B, 0x39, 0x3A, 0x95, 0xB9, 0x33, 0xB8, 0x94, 0xB5, 0xDA, 
    0xC7, 0xBF, 0x7A, 0x6F, 0x87, 0x54, 0x34, 0xF6, 0x66, 0x48, 0x10, 0xAA, 0x29, 0x9D, 0x98, 0xD9, 
    0x76, 0xA8, 0x17, 0x09, 0x3F, 0x27, 0xD5, 0x57, 0x3E, 0x24, 0x6C, 0x3C, 0x49, 0x14, 0x8E, 0x42, 
    0x1B, 0x18, 0x43, 0x6A, 0x5B, 0x93, 0xC8, 0x90, 0xFF, 0xFC, 0xF3, 0xE6, 0xA9, 0x8A, 0xF9, 0x2E, 
    0x4A, 0xAE, 0x59, 0x96, 0x44, 0xC5, 0x04, 0x51, 0x2C, 0x4E, 0x9C, 0xF2, 0x1F, 0x4F, 0xBB, 0x9B, 
    0x23, 0x2D, 0xD3, 0xC6, 0xCF, 0xCA, 0xAD, 0xCB, 0xE0, 0xA6, 0xFE, 0x31, 0x74, 0xB3, 0x45, 0x46, 
    0xB6, 0x7D, 0xEE, 0x1E, 0xEB, 0x6B, 0xEA, 0x7F, 0x1C, 0x01, 0xF0, 0x08, 0x4C, 0x1A, 0x6D, 0x2F, 
    0x38, 0x85, 0x82, 0x06, 0xE4, 0xD4, 0x75, 0x69, 0x7E, 0x8F, 0xB1, 0x9F, 0xB2, 0x5D, 0xBA, 0x41, 
    0x56, 0x63, 0x8C, 0x9A, 0x62, 0x0E, 0xC2, 0x80, 0x36, 0x78, 0x0F, 0x1D, 0x4D, 0xFD, 0xDE, 0xE7, 
    0xA3, 0x73, 0xAC, 0xAF, 0xD2, 0x2B, 0x67, 0xF7, 0x0B, 0xD7, 0x8D, 0xA7, 0x12, 0x22, 0x0C, 0x53, 
    0xF4, 0x8B, 0x5A, 0xCD, 0x79, 0xAB, 0x52, 0x19, 0x20, 0x2A, 0x81, 0x84, 0xE8, 0xDC, 0x16, 0xE3, 
    0x32, 0xE1, 0x68, 0x37, 0xD0, 0xA4, 0x58, 0x72, 0x6E, 0x71, 0xA5, 0xC3, 0xED, 0x5F, 0x7B, 0xDB, 
    0x00, 0x11, 0x03, 0x50, 0x40, 0x21, 0x25, 0x30, 0xE9, 0x5E, 0xF1, 0xB7, 0xE5, 0xB4, 0x70, 0x55, 
    0xDF, 0x3D, 0xD6, 0x9E, 0x47, 0x5C, 0xC4, 0x97, 0x86, 0xCE, 0x60, 0xC0, 0x15, 0x26, 0xD1, 0xD8, 
    0x7C, 0xBE, 0xA2, 0x64, 0xBC, 0xEF, 0xDD, 0xF5, 0xBD, 0x0A, 0xA1, 0xE2, 0xA0, 0xC9, 0x83, 0x07  
    ],
    "sbox_hussain_6": [
    0x78, 0x2e, 0xf5, 0x01, 0x42, 0xe8, 0x8c, 0xc8, 0x4f, 0x18, 0x1c, 0x7d, 0xb6, 0x98, 0x5c, 0x07, 
    0x9b, 0x24, 0xdf, 0x6d, 0x64, 0xcc, 0x7f, 0x74, 0x03, 0x44, 0xb0, 0x0e, 0x9a, 0xb3, 0x9e, 0x54, 
    0xf9, 0x4e, 0xe4, 0x70, 0x13, 0x00, 0x36, 0x08, 0xe0, 0x6b, 0xb2, 0xf1, 0x51, 0xd5, 0x86, 0x46, 
    0xfa, 0xdb, 0x31, 0x6c, 0xa2, 0x5f, 0xfe, 0x67, 0x1f, 0x8f, 0x22, 0x5b, 0x33, 0x39, 0xc0, 0x43, 
    0xbc, 0xbe, 0xb1, 0x82, 0xe2, 0x10, 0x68, 0xa4, 0xeb, 0x30, 0x4a, 0x47, 0x83, 0x0a, 0x5a, 0xf7, 
    0x7a, 0xca, 0xf3, 0xa5, 0x3b, 0x9f, 0x4b, 0xc7, 0xe5, 0x32, 0x21, 0xcd, 0x35, 0x60, 0xce, 0x3d, 
    0x7b, 0x69, 0xfd, 0x41, 0xaa, 0xd4, 0xf0, 0x92, 0x09, 0x84, 0x11, 0x2b, 0x95, 0xbd, 0x27, 0x28, 
    0x4d, 0x9c, 0x0f, 0xa6, 0x14, 0xea, 0x45, 0xdd, 0xe1, 0x06, 0x8b, 0x56, 0x2d, 0x23, 0x85, 0x1a, 
    0x90, 0x57, 0x91, 0x61, 0xa8, 0x3a, 0x49, 0x97, 0x0d, 0x29, 0x2c, 0x1b, 0x1e, 0x58, 0xe6, 0x48, 
    0x40, 0x8d, 0x55, 0xa0, 0xf2, 0x6e, 0xde, 0xb5, 0x75, 0x3f, 0xec, 0xa9, 0xcf, 0xd1, 0xa3, 0xc6, 
    0x79, 0x34, 0x5d, 0x04, 0xad, 0xb7, 0x20, 0xae, 0xbb, 0x96, 0x17, 0x9d, 0x99, 0xe9, 0x65, 0x53, 
    0x72, 0x77, 0xdc, 0x3c, 0xf4, 0xd2, 0xfb, 0x50, 0xd3, 0x81, 0x38, 0x3e, 0xe3, 0xd6, 0x5e, 0x63, 
    0xbf, 0x87, 0xd8, 0x7e, 0x52, 0x2a, 0x88, 0x80, 0x19, 0xaf, 0xc4, 0x59, 0x6a, 0x25, 0x2f, 0x94, 
    0xed, 0x15, 0x8e, 0x71, 0x7c, 0x0b, 0x93, 0xff, 0xcb, 0xab, 0xc5, 0xba, 0xd7, 0x4c, 0xc9, 0x89, 
    0x76, 0xb8, 0xd0, 0xb4, 0x73, 0x8a, 0xe7, 0xfc, 0xc2, 0x62, 0x1d, 0x37, 0x66, 0xc3, 0x12, 0xf6, 
    0xb9, 0x0c, 0xc1, 0xd9, 0x05, 0x6f, 0x16, 0xac, 0xf8, 0xee, 0xda, 0x02, 0x26, 0xa7, 0xef, 0xa1  
    ],
    "sbox_ozkaynak_1": [
    0x63, 0xA1, 0x9F, 0x98, 0x82, 0x6C, 0xEA, 0x5A, 0xFC, 0xF0, 0xC2, 0x28, 0x55, 0xCC, 0x39, 0x51, 
    0x95, 0xCE, 0xD6, 0x58, 0x0F, 0x3E, 0x37, 0x69, 0x74, 0x3D, 0x53, 0xE1, 0x4A, 0x87, 0x76, 0xDA, 
    0xF9, 0x86, 0x7E, 0x01, 0x02, 0xE3, 0x2C, 0x48, 0xE5, 0x34, 0xC7, 0x1D, 0xE2, 0xAC, 0x45, 0xEE, 
    0xCD, 0x07, 0x2D, 0x20, 0xBB, 0x0A, 0x35, 0x4C, 0x15, 0x1A, 0xAF, 0x6B, 0x92, 0xAB, 0x62, 0xA9, 
    0xC8, 0x23, 0x27, 0x43, 0x6E, 0x03, 0x71, 0xAA, 0x7D, 0x05, 0xA5, 0x70, 0x9B, 0xC6, 0xA3, 0xEC, 
    0xFE, 0x61, 0x5B, 0x7B, 0xA8, 0x60, 0xDE, 0xF1, 0x7C, 0x1B, 0x44, 0xD4, 0xFB, 0x8D, 0x81, 0x66, 
    0xDF, 0x47, 0xD7, 0x3B, 0xEF, 0x22, 0xD3, 0x2B, 0x6D, 0x7A, 0x04, 0xD5, 0x30, 0x90, 0xE4, 0x9E, 
    0xD9, 0xE8, 0x9C, 0xF2, 0xBC, 0x57, 0x93, 0x1C, 0x7F, 0x72, 0x2A, 0x65, 0x54, 0x88, 0xD1, 0x40, 
    0x1F, 0xFD, 0x64, 0x12, 0xB8, 0x5D, 0xE7, 0x0C, 0x78, 0x33, 0xDC, 0xC0, 0xF4, 0xF5, 0xCA, 0x84, 
    0x3F, 0x96, 0xFA, 0x09, 0x8E, 0x36, 0xC1, 0x91, 0x3C, 0xB9, 0x31, 0xD2, 0x32, 0x41, 0x6F, 0x1E, 
    0xED, 0x97, 0xB5, 0x2F, 0x73, 0x8F, 0xA0, 0xF6, 0x46, 0x5E, 0xBA, 0x94, 0xB4, 0xBD, 0x3A, 0xF7, 
    0x6A, 0x18, 0xD0, 0xAE, 0x9D, 0x89, 0x52, 0x0E, 0xDB, 0x9A, 0x80, 0x19, 0x16, 0x4B, 0x29, 0x24, 
    0x8B, 0x08, 0xEB, 0xA4, 0x8C, 0xF8, 0x25, 0x8A, 0xB6, 0xBF, 0x79, 0xFF, 0xD8, 0xB1, 0x0B, 0x4F, 
    0xA7, 0x17, 0x49, 0xA2, 0x68, 0x56, 0xA6, 0xB2, 0x21, 0x85, 0x4E, 0x38, 0x83, 0xBE, 0xB7, 0x2E, 
    0x42, 0x4D, 0xB3, 0xDD, 0x77, 0xB0, 0x00, 0xE0, 0xCB, 0xC4, 0xE6, 0x67, 0x13, 0xC9, 0xE9, 0x5C, 
    0xAD, 0x10, 0xC3, 0xC5, 0x14, 0xCF, 0x06, 0x50, 0x5F, 0x59, 0x75, 0x0D, 0x99, 0xF3, 0x11, 0x26  
    ],
    "sbox_azam_1": [
    0x9a, 0xd9, 0xe3, 0x6e, 0x55, 0x1d, 0xc7, 0x25, 0x44, 0x15, 0x5b, 0x4e, 0xd0, 0x03, 0x94, 0x28,
    0xc6, 0x34, 0x36, 0x02, 0x49, 0x07, 0xa8, 0xc9, 0xe5, 0xb8, 0x92, 0x06, 0xac, 0x1c, 0x2c, 0x43,
    0xc3, 0x35, 0x6a, 0x0a, 0xcc, 0x83, 0x9d, 0xb9, 0xbb, 0x9c, 0xce, 0xa1, 0x51, 0x67, 0xd3, 0x21,
    0x60, 0x9f, 0x48, 0x86, 0xa4, 0x8f, 0x8c, 0xc1, 0x91, 0xe7, 0xed, 0x0c, 0xdd, 0xbc, 0xc5, 0x74,
    0x2f, 0x13, 0x81, 0x68, 0x33, 0xec, 0x38, 0x85, 0x37, 0xdc, 0x57, 0x01, 0xcb, 0x75, 0xd2, 0x18,
    0x04, 0xae, 0xaf, 0x71, 0x22, 0xd5, 0xab, 0xff, 0x1e, 0x2b, 0x82, 0xbf, 0x39, 0x89, 0x4c, 0xea,
    0xf7, 0xf4, 0xad, 0xdf, 0x3f, 0x3c, 0xe6, 0xa6, 0x08, 0xbe, 0x8b, 0x63, 0x31, 0xc8, 0x17, 0xf5,
    0x3a, 0x66, 0xe2, 0x53, 0x7a, 0x46, 0xf1, 0x5e, 0x7f, 0x29, 0xc2, 0xe9, 0x61, 0xfb, 0x6b, 0x1a,
    0x6d, 0x3d, 0xf8, 0x5a, 0xc0, 0xa7, 0x93, 0x52, 0x9e, 0xe1, 0x24, 0x32, 0x54, 0x5c, 0x58, 0x26,
    0x4a, 0x88, 0x8a, 0xe8, 0x3e, 0xb0, 0x80, 0xbd, 0x7c, 0x76, 0xa9, 0x0e, 0xe4, 0x00, 0xf3, 0xb5,
    0x7b, 0xfe, 0x14, 0xca, 0x4b, 0x95, 0xdb, 0x78, 0xa0, 0x09, 0xfd, 0x27, 0xb4, 0xcf, 0x72, 0x8e,
    0xb7, 0x5d, 0x65, 0x0f, 0xee, 0xb1, 0x84, 0xd4, 0x23, 0xfa, 0xef, 0xf9, 0xb3, 0x11, 0x41, 0xba,
    0x0b, 0x7d, 0xb2, 0x2d, 0xaa, 0x8d, 0x79, 0x7e, 0x77, 0x40, 0x90, 0xb6, 0x70, 0x16, 0xa5, 0xde,
    0x64, 0x45, 0xfc, 0xd8, 0x0d, 0x1b, 0x98, 0xeb, 0x50, 0x05, 0xc4, 0x3b, 0x19, 0x97, 0x4f, 0x9b,
    0xf0, 0x4d, 0x73, 0x47, 0x1f, 0x69, 0x5f, 0x56, 0xd1, 0x96, 0x62, 0x59, 0xa3, 0xf6, 0x42, 0x12,
    0xa2, 0xd6, 0xda, 0x2a, 0xf2, 0x2e, 0x6f, 0x30, 0xd7, 0xe0, 0x87, 0x6c, 0x99, 0x20, 0x10, 0xcd
    ],
    "sbox_azam_2": [
    0x21, 0x97, 0x41, 0xcf, 0x0c, 0x67, 0x60, 0x7b, 0xbe, 0x7e, 0x52, 0x9b, 0x15, 0x01, 0xe5, 0xba,
    0x3d, 0xe0, 0x2a, 0xb3, 0x3f, 0xb2, 0x49, 0x99, 0x8a, 0xa8, 0x92, 0x29, 0x2e, 0x09, 0x6d, 0xb8,
    0x7c, 0xf3, 0xec, 0x39, 0x13, 0x06, 0x64, 0x5e, 0x45, 0x30, 0x74, 0xd8, 0x36, 0xe4, 0x5a, 0x51,
    0x2f, 0x0d, 0x58, 0xc5, 0xf7, 0x81, 0xce, 0xc6, 0xdd, 0x05, 0x4e, 0x50, 0x96, 0xc8, 0x91, 0x37,
    0x3c, 0x69, 0xd4, 0x12, 0xd2, 0x2b, 0x89, 0xfa, 0x87, 0xa6, 0x34, 0x73, 0x5b, 0xd0, 0x19, 0xc7,
    0x4d, 0xaa, 0x79, 0x7a, 0x0b, 0xfe, 0x1b, 0x9d, 0xaf, 0x22, 0x68, 0xc9, 0x5f, 0xde, 0x85, 0xb0,
    0x24, 0x03, 0x8d, 0xda, 0x1e, 0xa2, 0xdc, 0xc1, 0x1c, 0x6e, 0xdf, 0xa1, 0x4a, 0xb6, 0xe2, 0x71,
    0x00, 0x70, 0xea, 0x90, 0xf1, 0x14, 0x9c, 0x3e, 0x31, 0x17, 0x1a, 0x23, 0x94, 0x65, 0xe9, 0x38,
    0xb5, 0x82, 0x76, 0x95, 0x46, 0xad, 0x47, 0x2d, 0x32, 0xcc, 0x0a, 0x57, 0xe8, 0x5d, 0xb1, 0x43,
    0x04, 0x78, 0x08, 0x28, 0x48, 0x7d, 0x5c, 0x72, 0x44, 0x53, 0xe1, 0xf6, 0x9e, 0x8f, 0x35, 0xc4,
    0xf9, 0xf2, 0x88, 0xc3, 0xa0, 0xd5, 0x83, 0x6b, 0x42, 0x1d, 0xe6, 0xbc, 0x26, 0x6f, 0xcd, 0xfd,
    0xab, 0xfb, 0x66, 0xeb, 0x1f, 0x7f, 0xd9, 0x11, 0xb7, 0x75, 0x25, 0xd3, 0xa4, 0x61, 0x77, 0xdb,
    0xa7, 0x86, 0x18, 0x10, 0xff, 0x02, 0x20, 0xd7, 0xe3, 0x9a, 0xbb, 0x4b, 0xe7, 0xf0, 0xac, 0x8e,
    0xf4, 0x59, 0x0e, 0x62, 0x4c, 0x55, 0x93, 0x4f, 0x40, 0xb4, 0xd6, 0x8b, 0x98, 0xee, 0x33, 0xb9,
    0x16, 0x2c, 0xc2, 0x63, 0x27, 0xa9, 0xcb, 0xbd, 0x6c, 0x56, 0x84, 0xed, 0xa3, 0xef, 0xd1, 0xf5,
    0x3b, 0xca, 0x0f, 0x3a, 0xf8, 0x80, 0xae, 0x8c, 0xc0, 0xbf, 0x6a, 0xa5, 0x9f, 0x54, 0x07, 0xfc
    ],
    "sbox_azam_3": [
    0x0f, 0x0d, 0xf7, 0xf9, 0xa7, 0xb7, 0xb3, 0xad, 0x65, 0xcc, 0x69, 0xd2, 0xd6, 0xcd, 0xc7, 0x13,
    0xa4, 0x26, 0x55, 0x48, 0x62, 0x5a, 0x71, 0x0c, 0xef, 0xd9, 0xa5, 0xe4, 0x7b, 0xc3, 0x1a, 0xd8,
    0xcf, 0x1e, 0xb6, 0xdb, 0x0e, 0xd7, 0xe8, 0x87, 0xf1, 0x91, 0x11, 0xf4, 0xdf, 0x72, 0x1d, 0x46,
    0x68, 0x51, 0x47, 0x63, 0xbf, 0x80, 0xe3, 0x56, 0xac, 0xb9, 0x05, 0x4b, 0xc5, 0xb8, 0x6d, 0xf8,
    0xa2, 0xfa, 0x19, 0x6e, 0x7d, 0xe6, 0x81, 0x23, 0x66, 0xea, 0x36, 0xab, 0xc2, 0x10, 0x21, 0x49,
    0x9b, 0xf6, 0x9a, 0x54, 0x95, 0x86, 0xee, 0x12, 0xf0, 0x43, 0xc8, 0xfd, 0x3d, 0x1f, 0xaa, 0xb4,
    0x37, 0x14, 0xe0, 0xbb, 0x0a, 0x93, 0x5c, 0x85, 0xc4, 0xf2, 0x92, 0x1b, 0x22, 0x8c, 0x1c, 0xc0,
    0x3f, 0x7f, 0x8f, 0xcb, 0x89, 0x02, 0x4a, 0xc1, 0x41, 0x04, 0x7c, 0x33, 0x6b, 0x18, 0x2a, 0x7a,
    0x67, 0x16, 0x29, 0xe2, 0xeb, 0xfc, 0x74, 0xd4, 0x4d, 0x31, 0x30, 0xc9, 0x94, 0xdd, 0xfb, 0x50,
    0xe5, 0x73, 0x5d, 0x8b, 0xb5, 0x34, 0x61, 0x77, 0xbd, 0xa6, 0x15, 0x2d, 0x35, 0x64, 0x20, 0x83,
    0x70, 0x5e, 0x3b, 0x8e, 0x75, 0x24, 0x99, 0xfe, 0x42, 0x9e, 0x4f, 0x79, 0x08, 0x82, 0x84, 0x3c,
    0xf5, 0xe7, 0x7e, 0x98, 0x97, 0x59, 0x00, 0x27, 0xa0, 0x88, 0x25, 0x4e, 0xec, 0x38, 0xce, 0x9d,
    0xde, 0xae, 0x52, 0x45, 0x06, 0x53, 0xdc, 0x03, 0x39, 0x6f, 0xd0, 0x2f, 0x8d, 0x57, 0xa8, 0xb0,
    0x0b, 0x76, 0xa9, 0x3a, 0xf3, 0x78, 0x96, 0x5b, 0xbe, 0x17, 0xb2, 0x2c, 0x07, 0x2b, 0xb1, 0x4c,
    0xa1, 0x90, 0xa3, 0x44, 0x58, 0x8a, 0xda, 0x6c, 0x9f, 0xba, 0x28, 0xed, 0xaf, 0x2e, 0xc6, 0x60,
    0xca, 0x09, 0x3e, 0x32, 0x40, 0xe9, 0xff, 0xd1, 0xbc, 0x01, 0x6a, 0xe1, 0x5f, 0xd5, 0x9c, 0xd3,
    ]
}

def SubBytes(sbox_type, s):
    #print("sbb_i: "+ print_hex(s))

    for i in range(4):
        for j in range(4):
            s[i][j] = sbox[sbox_type][s[i][j]]

def InvSubBytes(sbox_type, s):
    inverse_sbox = [0] * len(sbox[sbox_type])
    for index, value in enumerate(sbox[sbox_type]):
        inverse_sbox[value] = index

    for i in range(4):
        for j in range(4):
            s[i][j] = inverse_sbox[s[i][j]]

#ShiftRows
def ShiftRows(s):
    shr_o = []
    temp = [s[0][0],s[1][1],s[2][2],s[3][3]]
    shr_o.append(temp)
    temp = [s[1][0],s[2][1],s[3][2],s[0][3]]
    shr_o.append(temp)
    temp = [s[2][0],s[3][1],s[0][2],s[1][3]]
    shr_o.append(temp)
    temp = [s[3][0],s[0][1],s[1][2],s[2][3]]
    shr_o.append(temp)

    return shr_o

def InvShiftRows(s):
    shr_o = []
    temp = [s[0][0],s[3][1],s[2][2],s[1][3]]
    shr_o.append(temp)
    temp = [s[1][0],s[0][1],s[3][2],s[2][3]]
    shr_o.append(temp)
    temp = [s[2][0],s[1][1],s[0][2],s[3][3]]
    shr_o.append(temp)
    temp = [s[3][0],s[2][1],s[1][2],s[0][3]]
    shr_o.append(temp)
    return shr_o

# MixColumns
def xtime(s):
    b = int(hex(s),16)
    b7 = (b >> 7) & 1
    b_1 = ((b << 1) | 0x0)%256
    b_2 = 0x1b & (b7 * 0b11111111)%256
    return b_1 ^ b_2

def x02(s):
    b = int(hex(s),16)
    b7 = (b >> 7) & 1
    b_1 = ((b << 1) | 0x0)%256
    b_2 = 0x1b & (b7 * 0b11111111)%256
    return b_1 ^ b_2

def x03(s):
    return x02(s) ^ s

def x04(s):
    return x02(x02(s))

def x08(s):
    return x02(x04(s))

def x09(s):
    return x08(s) ^ s

def x11(s):
    return x08(s) ^ x02(s) ^ s

def x13(s):
    return x08(s) ^ x04(s) ^ s

def x14(s):
    return x08(s) ^ x04(s) ^ x02(s)


def MixColumns(s):
    mxc_tmp = []
    for i in range(0,4):
        temp = s[i][0] ^ s[i][1] ^ s[i][2] ^ s[i][3]
        mxc_tmp.append(temp)

    mxc_o = []
    for i in range(0,4):
        mxc = []
        temp = s[i][0] ^ xtime(s[i][0] ^ s[i][1]) ^ mxc_tmp[i]
        mxc.append(temp)
        temp = s[i][1] ^ xtime(s[i][1] ^ s[i][2]) ^ mxc_tmp[i]
        mxc.append(temp)
        temp = s[i][2] ^ xtime(s[i][2] ^ s[i][3]) ^ mxc_tmp[i]
        mxc.append(temp)
        temp = s[i][3] ^ xtime(s[i][3] ^ s[i][0]) ^ mxc_tmp[i]
        mxc.append(temp)
        mxc_o.append(mxc)

    return mxc_o

def InvMixColumns(s):
    mxc_o = []
    for i in range(0,4):
        mxc = []
        temp = x14(s[i][0]) ^ x11(s[i][1]) ^ x13(s[i][2]) ^ x09(s[i][3])
        mxc.append(temp)
        temp = x09(s[i][0]) ^ x14(s[i][1]) ^ x11(s[i][2]) ^ x13(s[i][3])
        mxc.append(temp)
        temp = x13(s[i][0]) ^ x09(s[i][1]) ^ x14(s[i][2]) ^ x11(s[i][3])
        mxc.append(temp)
        temp = x11(s[i][0]) ^ x13(s[i][1]) ^ x09(s[i][2]) ^ x14(s[i][3])
        mxc.append(temp)
        mxc_o.append(mxc)

    return mxc_o

#AddRoundKey
def AddRoundKey(s, k):
    for i in range(4):
        for j in range(4):
            s[i][j] ^= k[i][j]

#KeyExpansion
def SubWord(sbox_type, word):
    w0 = word & 0xFF
    w1 = (word >> 8) & 0xFF
    w2 = (word >> 16) & 0xFF
    w3 = (word >> 24) & 0xFF

    w0 = sbox[sbox_type][w0]
    w1 = sbox[sbox_type][w1]
    w2 = sbox[sbox_type][w2]
    w3 = sbox[sbox_type][w3]

    w0_sub_o = (w3 << 24) | (w2 << 16) | (w1 << 8) | w0
    return w0_sub_o

def KeyExpansion(sbox_type, key):
    R = 10

    state = int(key,16)
    Rcon = 1
    ks_o = []
    ks_o.append(bytes2matrix_key(key))

    for i in range(1,11):

        Rcon_MSB = int(bin(Rcon)[2:].zfill(8)[0])

        if(Rcon_MSB):
            Rcon_new_2 = 0x1b
        else:
            Rcon_new_2 = 0x00

        Rcon_new_1 = ((Rcon & 0b01111111) << 1) | 0b0

        Rcon_new = Rcon_new_1 ^ Rcon_new_2

        w0 = (state >> 96) & 0xFFFFFFFF
        w1 = (state >> 64) & 0xFFFFFFFF
        w2 = (state >> 32) & 0xFFFFFFFF
        w3 = state & 0xFFFFFFFF

        wN = state & 0xFFFFFFFF
        wN_23_0 = wN & 0xFFFFFF
        wN_31_24 = (wN >> 24) & 0xFF
        w0_sub_i = ((wN_23_0 << 8) | wN_31_24) & 0xFFFFFFFF

        w0_sub_o = SubWord(sbox_type,w0_sub_i)

        w0_temp = ((((w0_sub_o >> 24) & 0xFF) ^ Rcon) << 24) | (w0_sub_o & 0xFFFFFF)

        w0_new = (w0 ^ w0_temp) & 0xFFFFFFFF
        w1_new = (w1 ^ w0_new) & 0xFFFFFFFF
        w2_new = (w2 ^ w1_new) & 0xFFFFFFFF
        w3_new = (w3 ^ w2_new) & 0xFFFFFFFF

        Rcon = Rcon_new
        ks = ((w0_new << 96) | (w1_new << 64) | (w2_new << 32) | w3_new)& 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
        state = ks

        temp = hex(ks)[2:]

        ks_o.append(bytes2matrix_key(str(temp)))

    return ks_o

#Inverse Key Expansion
def xor_bytes(*arg: bytes) -> bytes:
    assert len({len(x) for x in arg}) == 1 # all args must have the same length
    xor_fun = lambda x, y : x ^ y
    return bytes(reduce(xor_fun, byt3s) for byt3s in zip(*arg))

def rot_word(word: bytes) -> bytes:
    '''
    apply the RotWord transformation to a bytes object of length 4
    '''
    assert len(word) == 4
    return bytes((word[(i + 1) % 4] for i in range(4)))

def sub_word(sbox_type, word: bytes) -> bytes:
    '''
    apply the AES S-Box to each of the bytes of the 4-byte word
    '''
    assert len(word) == 4
    return bytes((sbox[sbox_type][w] for w in word))

def invKeyExpansion(round_key: bytes, aes_round: int, sbox_type):
    '''
    reverse the AES-128 key schedule, using a single round_key.
    '''
    rcon = [x.to_bytes(4, 'little') for x in [ 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36, ]]
    assert len(round_key) * 8 == 128
    for i in range(aes_round - 1, -1, -1):
        a2 = round_key[0:4]
        b2 = round_key[4:8]
        c2 = round_key[8:12]
        d2 = round_key[12:16]

        d1 = xor_bytes(d2, c2)
        c1 = xor_bytes(c2, b2)
        b1 = xor_bytes(b2, a2)
        a1 = xor_bytes(a2, rot_word(sub_word(sbox_type,d1)), rcon[i])

        round_key = a1 + b1 + c1 + d1

    return round_key


#Functions
def split_blocks(message):
        return [message[i:i+16] for i in range(0, len(message), 16)]

def bytes2matrix_key(text):
    text = text.zfill(32)
    hex_pairs = [text[i:i+2] for i in range(0, len(text), 2)]
    int_values = [int(hex_pair, 16) for hex_pair in hex_pairs]
    return [int_values[i:i+4] for i in range(0, len(int_values), 4)]

def bytes2matrix(text):
    return [list(text[i:i+4]) for i in range(0, len(text), 4)]

def matrix2bytes(matrix):
    return [element for row in matrix for element in row]

def printInvSbox(sbox_type):
    inverse_sbox = [0] * len(sbox[sbox_type])
    for index, value in enumerate(sbox[sbox_type]):
        inverse_sbox[value] = index
    
    for i in range(len(inverse_sbox)):
        print(hex(inverse_sbox[i]))
    file_name = "./inv_sbox/inv_" + sbox_type + ".txt"
    with open(file_name,'w') as print_file:
        for i in range(16):
            file_line = ""
            for k in range(16):
                file_line = file_line + "0x" + format(inverse_sbox[16*i+k], '02x') + ","
            print(file_line,file=print_file)
